//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Land"",
            ""id"": ""6eb68838-8532-4a8d-b19b-d2e5dbb02de1"",
            ""actions"": [
                {
                    ""name"": ""NorthBtn"",
                    ""type"": ""Value"",
                    ""id"": ""88cab75e-004d-4a63-b9a9-3d68f67d2b85"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SouthBtn"",
                    ""type"": ""Value"",
                    ""id"": ""4e41e020-abe0-4960-a0ec-85c4f1075a13"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WestBtn"",
                    ""type"": ""Button"",
                    ""id"": ""a7d01961-06bd-4058-b0a3-88d0c738645f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EastBtn"",
                    ""type"": ""Value"",
                    ""id"": ""8d7909e3-459f-4f8b-8a43-24266593cc8e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a554a47f-001f-4ea7-8afd-6f91ec1c2f0e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NorthBtn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e043b47-5e34-4e8a-848b-c26b1b638efb"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NorthBtn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2cbeb138-4a5b-445e-b96e-d51a7634e054"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SouthBtn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""610d8149-5762-40d4-b492-07460e3d88d8"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SouthBtn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e01811f5-1efe-4141-a72c-3f81625fef89"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WestBtn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d76597f6-7501-4ad8-9e7d-8c2973faf0bf"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WestBtn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b16114fd-dc0c-4674-935c-573b5d9e76d7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EastBtn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03b9e5f7-6cf7-4f16-a28a-3106b2f3583d"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EastBtn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Land
        m_Land = asset.FindActionMap("Land", throwIfNotFound: true);
        m_Land_NorthBtn = m_Land.FindAction("NorthBtn", throwIfNotFound: true);
        m_Land_SouthBtn = m_Land.FindAction("SouthBtn", throwIfNotFound: true);
        m_Land_WestBtn = m_Land.FindAction("WestBtn", throwIfNotFound: true);
        m_Land_EastBtn = m_Land.FindAction("EastBtn", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Land
    private readonly InputActionMap m_Land;
    private List<ILandActions> m_LandActionsCallbackInterfaces = new List<ILandActions>();
    private readonly InputAction m_Land_NorthBtn;
    private readonly InputAction m_Land_SouthBtn;
    private readonly InputAction m_Land_WestBtn;
    private readonly InputAction m_Land_EastBtn;
    public struct LandActions
    {
        private @InputSystem m_Wrapper;
        public LandActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @NorthBtn => m_Wrapper.m_Land_NorthBtn;
        public InputAction @SouthBtn => m_Wrapper.m_Land_SouthBtn;
        public InputAction @WestBtn => m_Wrapper.m_Land_WestBtn;
        public InputAction @EastBtn => m_Wrapper.m_Land_EastBtn;
        public InputActionMap Get() { return m_Wrapper.m_Land; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LandActions set) { return set.Get(); }
        public void AddCallbacks(ILandActions instance)
        {
            if (instance == null || m_Wrapper.m_LandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LandActionsCallbackInterfaces.Add(instance);
            @NorthBtn.started += instance.OnNorthBtn;
            @NorthBtn.performed += instance.OnNorthBtn;
            @NorthBtn.canceled += instance.OnNorthBtn;
            @SouthBtn.started += instance.OnSouthBtn;
            @SouthBtn.performed += instance.OnSouthBtn;
            @SouthBtn.canceled += instance.OnSouthBtn;
            @WestBtn.started += instance.OnWestBtn;
            @WestBtn.performed += instance.OnWestBtn;
            @WestBtn.canceled += instance.OnWestBtn;
            @EastBtn.started += instance.OnEastBtn;
            @EastBtn.performed += instance.OnEastBtn;
            @EastBtn.canceled += instance.OnEastBtn;
        }

        private void UnregisterCallbacks(ILandActions instance)
        {
            @NorthBtn.started -= instance.OnNorthBtn;
            @NorthBtn.performed -= instance.OnNorthBtn;
            @NorthBtn.canceled -= instance.OnNorthBtn;
            @SouthBtn.started -= instance.OnSouthBtn;
            @SouthBtn.performed -= instance.OnSouthBtn;
            @SouthBtn.canceled -= instance.OnSouthBtn;
            @WestBtn.started -= instance.OnWestBtn;
            @WestBtn.performed -= instance.OnWestBtn;
            @WestBtn.canceled -= instance.OnWestBtn;
            @EastBtn.started -= instance.OnEastBtn;
            @EastBtn.performed -= instance.OnEastBtn;
            @EastBtn.canceled -= instance.OnEastBtn;
        }

        public void RemoveCallbacks(ILandActions instance)
        {
            if (m_Wrapper.m_LandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILandActions instance)
        {
            foreach (var item in m_Wrapper.m_LandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LandActions @Land => new LandActions(this);
    public interface ILandActions
    {
        void OnNorthBtn(InputAction.CallbackContext context);
        void OnSouthBtn(InputAction.CallbackContext context);
        void OnWestBtn(InputAction.CallbackContext context);
        void OnEastBtn(InputAction.CallbackContext context);
    }
}
